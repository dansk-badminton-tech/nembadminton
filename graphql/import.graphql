extend type Query {
    badmintonPlayerClubs: [OptionClub] @field(resolver: "FlyCompany\\Scraper\\GraphQL\\Queries\\ImportClubOptions")
    badmintonPlayerTeams(input: BadmintonPlayerTeamsInput @spread): [BadmintonPlayerTeam] @field(resolver: "FlyCompany\\Scraper\\GraphQL\\Queries\\BadmintonPlayerTeams")
    badmintonPlayerTeamFights(input: BadmintonPlayerTeamFightsInput @spread): [BadmintonPlayerTeamFight] @field(resolver: "FlyCompany\\Scraper\\GraphQL\\Queries\\BadmintonPlayerTeamFights")
    badmintonPlayerTeamMatch(input: BadmintonPlayerTeamMatchInput @spread) : ImportTeamMatch @field(resolver: "FlyCompany\\Scraper\\GraphQL\\Queries\\BadmintonPlayerTeamMatch")
}

extend type Mutation {
    badmintonPlayerTeamMatchImport(input: TeamMatchImportInput @spread) : Boolean @field(resolver: "FlyCompany\\Scraper\\GraphQL\\Mutations\\BadmintonPlayerTeamMatchImport")
}

type BadmintonPlayerTeamFight {
    teams: [String!]!
    matchId: Int!
    gameTime: String!
}

input BadmintonPlayerTeamFightsInput {
    clubId: Int!
    season: Int!
    ageGroupId: Int!
    leagueGroupId: Int!
    clubName: String!
}

input BadmintonPlayerTeamsInput {
    clubId: Int!
    season: Int!
}

type BadmintonPlayerTeam {
    leagueGroupId: String!
    ageGroupId: String!
    name: String!
    league: String!
}


input BadmintonPlayerTeamMatchInput {
    clubId: String!
    leagueMatchId: String!
    season: String!
    version: String!
}


input TeamMatchImportInput {
    team: ID!
    badmintonPlayerTeamMatch: BadmintonPlayerTeamMatchInput!
    side: Side!
}

enum Side {
    HOME @enum(value: "home")
    GUEST @enum(value: "guest")
}

type ImportTeamMatch {
    home: ImportTeam
    guest: ImportTeam
}

type ImportTeam {
    name: String!
    squad: ImportSquad
}

type ImportSquad {
    playerLimit: Int!
    categories: [ImportCategory]
}

type ImportMember {
    refId: String!
    name: String!
    gender: String!
    points: [ImportPoint!]
}

type ImportPoint {
    id: Int,
    points: Int
    position: Int
    category: String
    version: String
}

type ImportCategory {
    category: String!
    name: String!
    players: [ImportMember!]!
}

type OptionClub {
    id: ID!
    name: String!
}
