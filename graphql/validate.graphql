extend type Mutation {
    "Validates players is playing on the right squad (level-ranking)"
    validateCrossSquads(input: [ValidateTeam!]!) : [PlayingToHigh!]! @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\Validate@validateCrossSquads")
    "Validates categories for right streng order (category-ranking)"
    validateSquads(input: [ValidateTeam!]!) : [PlayingToHigh!]! @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\Validate@validateSquads")
    "Validates all spots is forfilled"
    validateBasicSquads(input: [ValidateTeam!]!) : [BaseValidation!]! @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\Validate@validateBasicSquads")
}

type BaseValidation {
    index: Int!
    spotsFulfilled: Boolean!
    missingPlayerInCategory: Boolean!
}

input ValidateTeam{
    name: String!
    squad: ValidateSquad
}

input ValidateSquad{
    id: String
    playerLimit: Int!
    league: LeagueType
    categories: [ValidateCategory]
}

input ValidateCategory {
    category: String!
    name: String!
    players: [ValidateMember!]!
}

input ValidateMember {
    id: String
    refId: String!
    name: String!
    gender: String!
    points: [ValidatePoint!]!
}

input ValidatePoint {
    id: Int,
    points: Int
    position: Int
    category: String
    version: String
    vintage: String
}

type BelowPlayer {
    name: String!
    id: ID!
    refId: String
}

type PlayingToHigh{
    name: String!
    id: ID!
    refId: String!
    category: String!
    gender: String!
    belowPlayer: [BelowPlayer!]
}
