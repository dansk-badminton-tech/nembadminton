extend type Query{
    membersCancellationSearch(
        clubIds: [Int!]! @scope(name: "clubs")
        name: String @where(operator: "like"),
        orderBy: _ @orderBy(columns: ["name"])
    ): [Member!]! @paginate
    cancellationCollector(id: ID! @eq) : CancellationCollector @find @guard @canFind(ability: "view", find: "id")
    cancellationCollectorPublic(sharingId: String! @eq(key: "sharing_id")) : CancellationCollector @find
    cancellationEvents("CancellationCollector ID" id: ID!) : [Event!]! @guard @field(resolver: "App\\GraphQL\\Queries\\CancellationEvents")
}

extend type Mutation {
    createCancellation(input: CancellationInput! @spread) : Cancellation @create @event(dispatch: "App\\Events\\CancellationCreated")
    deleteCancellation(id: ID! @eq) : Cancellation @delete @guard @canFind(ability: "delete", find: "id")
    createCancellationCollector(input: CancellationCollectionInput! @spread) : CancellationCollector @create @guard @inject(context: "user.id", name: "user_id") @inject(context: "user.clubhouse_id", name: "clubhouse_id")
    updateCancellationCollector(id: ID!, input: CancellationCollectionInput! @spread) : CancellationCollector @update @guard @canFind(ability: "update", find: "id")
    deleteCancellationCollector(id: ID! @eq) : CancellationCollector @delete @canFind(ability: "delete", find: "id") @guard
}

input CancellationInput {
    refId: String!
    teamId: String
    message: String
    email: String @rules(apply: ["email"])
    cancellationCollector: ConnectCancellationCollectorBelongsTo
    dates: CreateCancellationDateHasMany!
}

input ConnectCancellationCollectorBelongsTo {
    connect: ID
}

input CreateCancellationDateHasMany {
    create: [CreateCancellationDate!]!
}

input CreateCancellationDate {
    date: Date!
}

input CancellationCollectionInput {
    email: String @rules(apply: ["email", "nullable"])
    clubs: ClubBelongsToMany
}

input ClubBelongsToMany {
    connect: [ID!]
    sync: [ID!]
}

type CancellationDate {
    date: Date
    "Updated at"
    updatedAt: DateTime @rename(attribute: "updated_at")
    "Created at"
    createdAt: DateTime @rename(attribute: "created_at")
}

type CancellationCollector {
    id: ID!
    "Email for notifying"
    email: String @guard
    "Clubs"
    clubs: [Club!]!
    "Sharing ID"
    sharingId: String! @rename(attribute: "sharing_id")
    "Cancellations"
    cancellations(
        hasDates: _ @whereHasConditions(columns: ["date"]),
        orderBy: _ @orderBy(columns: ["created_at"])
    ): [Cancellation!]! @hasMany(type: PAGINATOR) @canResolved(ability: "view")
    "Updated at"
    updatedAt: DateTime @rename(attribute: "updated_at")
    "Created at"
    createdAt: DateTime @rename(attribute: "created_at")
}

type Cancellation {
    id: ID
    refId: String!
    teamId: String
    message: String
    member: Member!
    email: String!
    cancellationCollector: CancellationCollector @belongsTo @canQuery(ability: "view", scopes: ["currentUser"])
    dates: [CancellationDate!]! @hasMany
    "Updated at"
    updatedAt: DateTime @rename(attribute: "updated_at")
    "Created at"
    createdAt: DateTime @rename(attribute: "created_at")
}
