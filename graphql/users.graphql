extend type Query {
    me : User @auth @guard
}

extend type Mutation {
    updateMe(input: UpdateMe! @spread) : User! @update @guard @inject(context: "user.id", name: "id") @event(dispatch: "App\\Events\\UserUpdate")
}

input UpsertSubscriptionSettingBelongTo {
    upsert: UpsertSubscriptionSettingInput
}

input UpsertSubscriptionSettingInput {
    id: ID
    email: Boolean!
}

input UpdateMe {
    name: String
    email: String
    player_id: String
    subscriptionSettings: UpsertSubscriptionSettingBelongTo
    clubs: ConnectClubs
}

input ConnectClubs {
    connect: [ID!]
    disconnect: [ID!]
}

type User {
    id: ID!
    name: String!
    email: String!
    player_id: String
    club: Club!
    clubs: [Club!]! @hasMany
    organization_id: Int!
    subscriptionSettings: SubscriptionSetting
    cancellationCollector: CancellationCollector
    "Roles"
    roles: [Role!]!
    "Selected primary clubhouse"
    clubhouse: Clubhouse
    "Clubhouse membership"
    clubhouses: [Clubhouse!]!
    created_at: DateTime!
    updated_at: DateTime!
}

type Role {
    id: ID!
    name: String!
}

type SubscriptionSetting {
    id: ID!
    email: Boolean!
}
