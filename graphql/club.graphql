extend type Query{
    membersSearchPublic(
        name: String @where(operator: "like"),
        gender: [Gender!] @in,
        orderBy: _ @orderBy(columns: ["name"])
    ): [Member!]! @paginate(defaultCount: 10, scopes: ["hasPoints"])
    membersSearch(
        name: String @where(operator: "like")
        refId: String @where
        gender: [Gender!] @in
        orderBy: _ @orderBy(columns: ["name"])
        whereCancellations: _ @whereConditions(columns: ["cancellations", "date", "teamId", "user_id", "playable"])
        "Need to have at least one point"
        hasPoints: Boolean @scope
        "If specified will not show members that is part of Team ID"
        notOnSquad: String @scope
    ): [Member!]! @paginate(defaultCount: 10, scopes: ["myClubs"]) @guard
    memberSearchPoints(
        version: Date!
        teamId: String
        name: String @where(operator: "like")
        rankingList: RankingList! = WOMEN_LEVEL
        playable: Boolean @where
        whereCancellations: _ @whereConditions(columns: ["cancellations", "date", "teamId", "user_id"])
    ): [Member!]! @paginate(defaultCount: 20, builder: "FlyCompany\\Members\\MemberSearch@searchPoints", scopes: ["myClubs"]) @guard
    memberSearchTeamFight(
        name: String!
        squadId: Int!
        gender: [Gender!]
    ) : [SquadMember!]! @paginate(defaultCount: 20, builder: "FlyCompany\\TeamFight\\Builders\\SquadMemberSearch@searchBuilder") @guard @can(ability: "view", resolved: true)
    clubsSearch(
        name: String @where(operator: "like", key: "name1"),
        orderBy: _ @orderBy(columns: ["name1"])
    ): [Club!]! @paginate(defaultCount: 10)
    members(name: String @where(operator: "like"), orderBy: _ @orderBy(columns: ["name", "latest_level_points"])): [MemberWithLatestPoints!]! @guard @paginate(defaultCount: 20, model: "FlyCompany\\Members\\Models\\MemberWithLatestPoints", scopes: ["myClub"])
    "Ranking versions based on the data from this system."
    rankingVersions: [Date!]! @field(resolver: "FlyCompany\\Club\\GraphQL\\Queries\\RankingVersions")
    "Clubs"
    clubs: [Club!]! @all(scopes: ["OrderByName"])
    "Event log"
    logs: [Log!]! @guard @paginate(defaultCount: 10, scopes: ["myClub", "orderByCreated"])
}

extend type Mutation {
    updateMember(input: CreateMemberInput! @spread): Member @update @guard
    createMember(input: CreateMemberInput! @spread): Member @upsert @guard @inject(context: "user.id", name: "owner_id")
    deleteMember(id: ID! @whereKey) : Member @delete @guard @can(ability: "delete", find: "id")
}

input CreateMemberInput {
    id: ID
    gender: Gender
    name: String
    refId: String
    points: UpsertPointMemberInput
    clubs: UpsertClubsInput
    playable: Boolean
}

input UpsertClubsInput {
    upsert: [UpsertClub!]
}

input UpsertClub {
    id: ID
}

input UpsertPointMemberInput {
    upsert: [CreatePointMemberInput!]!
}

input CreatePointMemberInput {
    id: ID
    category: Category
    points: Int!
    vintage: Vintage!
    version: Date!
}

enum Category {
    LEVEL @enum(value: null)
    DD @enum(value: "DD")
    DS @enum(value: "DS")
    MxD @enum(value: "MxD")
    HD @enum(value: "HD")
    HS @enum(value: "HS")
    MxH @enum(value: "MxH")
}

enum Gender {
    MEN @enum(value: "M")
    WOMEN @enum(value: "K")
}

enum RankingList {
    ALL_LEVEL @enum(value: "ALL")
    WOMEN_SINGLE @enum(value: "DS")
    WOMENS_DOUBLE @enum(value: "DD")
    WOMEN_MIX @enum(value: "MxD")
    MEN_SINGLE @enum(value: "HS")
    MENS_DOUBLE @enum(value: "HD")
    MEN_MIX @enum(value: "MxH")
}

type Log {
    id: ID!
    log: String!
    component: String!
    "Updated at"
    updatedAt: DateTime @rename(attribute: "updated_at")
    "Created at"
    createdAt: DateTime @rename(attribute: "created_at")
}

type MemberWithLatestPoints {
    id: ID!
    refId: String!
    name: String!
    gender: Gender!
    vintage: Vintage! @method(name: "getVintage")
    birthday: Date! @method(name: "getBirthday")
    latestLevelPoints: Int @rename(attribute: "latest_level_points")
    latestLevelPosition: Int @rename(attribute: "latest_level_position")
    latestLevelVersion: Date @rename(attribute: "latest_level_version")
}

enum Vintage {
    U9 @enum(value: "U9")
    U11 @enum(value: "U11")
    U13 @enum(value: "U13")
    U15 @enum(value: "U15")
    U17 @enum(value: "U17")
    U19 @enum(value: "U19")
    SEN @enum(value: "SEN")
}

type Member {
    id: ID!
    refId: String!
    name: String!
    gender: Gender!
    ownerId: Int @rename(attribute: "owner_id")
    vintage: Vintage! @method(name: "getVintage")
    birthday: Date! @method(name: "getBirthday")
    points(version: Date @eq, where: _ @whereConditions(columns: ["points", "category"]) ): [Point!]! @hasMany
    clubs: [Club!]! @belongsToMany
    cancellations(where: _ @whereConditions(columns: ["teamId", "date", "user_id"])): [Cancellation!]! @hasMany @canResolved(ability: "view")
    playable: Boolean!
}

type Point {
    id: ID!
    points: Int
    position: Int
    category: Category
    vintage: String
    version: Date
}

type Club {
    id: ID!
    name1: String!
    name2: String!
    badmintonPlayerId: Int!
    initialized: Boolean!
}
