extend type Query {
    team(id: ID! @eq) : Teams @find
    teams(order: _ @orderBy(columns: ["created_at", "updated_at", "game_date"]), gameDate: DateRange @whereBetween(key: "game_date")) : [Teams!]! @paginate(defaultCount: 20, scopes: ["currentUser"]) @guard
    teamsByBadmintonId : [Teams!]! @guard @field(resolver: "App\\GraphQL\\Queries\\TeamsByBadmintonId")
    export(teamId: ID!) : String! @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Queries\\Exporter")
    squadMember(id: ID! @eq) : SquadMember @find @guard
}

extend type Mutation {
    updateSquadPoint(input: UpdateSquadPointInput! @spread) : SquadPoint @update @guard
    deleteSquadMember(id: ID! @eq) : SquadMember @delete @guard
    updateSquadMember(input: UpdateSquadMemberInput! @spread) : SquadMember @update @guard
    createSquadMember(input: CreateSquadMemberInput! @spread) : SquadMember @create @guard
    addSquadMemberByRefId(input: AddSquadMemberByRefIdInput! @spread) : SquadMember @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\AddSquadMemberByRefId")
    updateCategory(input: UpdateCategoryInputNew! @spread) : SquadCategory @update @guard
    deleteSquad(id: ID! @eq) : Squad @guard @delete
    createSquad(input: CreateSquadInput! @spread) : Squad! @create @guard
    updateSquad(input: UpdateSquadInput! @spread) : Squad! @update @guard
    moveSquadOrderUp(id: ID!) : Squad! @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\SquadOrdering@moveSquadOrderUp")
    moveSquadOrderDown(id: ID!) : Squad! @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\SquadOrdering@moveSquadOrderDown")
    updateTeam(input: UpdateTeamInput! @spread): Teams! @guard @update @inject(context: "user.id", name: "user_id")
    createTeam(input: CreateTeamInput! @spread) : Teams! @create @guard @inject(context: "user.id", name: "user_id")
    copyTeam(id: ID!) : Teams! @guard @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\CopyTeam@copyTeam")
    deleteTeam(id: ID! @eq) : Teams! @guard @delete @inject(context: "user.id", name: "user_id")
    notify(id: ID!) : Boolean @guard @inject(context: "user.id", name: "user_id") @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\UpdateTeams@notify")
    "Changes all player points to the new version. Does not update if squad has a specific version"
    updatePointsTeam(id: ID!, version: String!) : Teams @guard @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\UpdateTeams@updatePointsOnAllSquadsInTeam")
    "Changes all player points to the new version."
    updatePointsSquad(id: ID!, version: String) : Squad @guard @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\UpdateTeams@updatePointsOnSquad")
}

input UpdateSquadMemberInput {
    id: ID!
    points: CreatePointHasManyInput!
}

input AddSquadMemberByRefIdInput {
    refId: String!
    categoryId: Int!
    version: Date!
}

input UpdateSquadPointInput {
    id: ID!
    category: Category
    points: Int
    position: Int
    vintage: Vintage
    corrected_manually: Boolean
}

input DateRange {
    from: Date!
    to: Date!
}

input UpdateCategoryInputNew {
    id: ID
    category: String
    name: String
}

input CreateSquadMemberInput {
    category: CreateCategoryBelongsTo!
    gender: Gender!
    name: String!
    refId: String! @rename(attribute: "member_ref_id")
    points: CreatePointHasManyInput!
}

input CreateCategoryBelongsTo {
    connect: ID!
}

input CreatePointHasManyInput {
    create: [CreatePointInput!]!
}

input CreatePointInput {
    category: Category!
    points: Int!
    position: Int
    vintage: Vintage!
    corrected_manually: Boolean!
    version: Date!
}

input UpdateSquadInput {
    id: ID!
    playerLimit: Int
    league: LeagueType
    order: Int
    "BadmintonPlayer match ID"
    externalTeamFightID: Int @rename(attribute: "external_team_fight_id")
    "Playing team"
    playingDatetime: DateTime @rename(attribute: "playing_datetime")
    "Playing place"
    playingPlace: String @rename(attribute: "playing_place")
    "Playing Address"
    playingAddress: String @rename(attribute: "playing_address")
    "Playing Zip code"
    playingZipCode: String @rename(attribute: "playing_zip_code")
    "Playing City"
    playingCity: String @rename(attribute: "playing_city")
    "Name"
    name: String
    "Ranking version"
    version: Date
}

input CreateSquadInput {
    team: SquadBelongsTo!
    playerLimit: Int!
    league: LeagueType!
    categories: CreateCategoryHasManyInput!
    order: Int
    "BadmintonPlayer match ID"
    externalTeamFightID: Int @rename(attribute: "external_team_fight_id")
    "Playing team"
    playingDatetime: DateTime @rename(attribute: "playing_datetime")
    "Playing place"
    playingPlace: String @rename(attribute: "playing_place")
    "Playing Address"
    playingAddress: String @rename(attribute: "playing_address")
    "Playing Zip code"
    playingZipCode: String @rename(attribute: "playing_zip_code")
    "Playing City"
    playingCity: String @rename(attribute: "playing_city")
    "Name"
    name: String
    "Ranking Version"
    version: Date
}

input SquadBelongsTo {
    connect: ID!
}

input CreateCategoryHasManyInput {
    create: [CreateCategoryInput!]!
}

input CreateCategoryInput {
    category: String!
    name: String!
}

input CreateTeamInput {
    club: CreateTeamBelongsTo
    name: String
    version: Date
    gameDate: Date @rename(attribute: "game_date")
}

input CreateTeamBelongsTo {
    connect: ID
}

input UpdateTeamInput {
    id: ID!
    name: String!
    version: Date!
    round: Int
    gameDate: Date! @rename(attribute: "game_date")
}

enum LeagueType{
    LIGA @enum(value: "LIGA")
    FIRSTDIVISION @enum(value: "FIRSTDIVISION")
    OTHER @enum(value: "OTHER")
}

type SquadMember {
    id: ID!
    refId: String! @rename(attribute: "member_ref_id")
    name: String!
    gender: Gender!
    vintage: Vintage! @method(name: "getVintage")
    isInSquad: Boolean! @field(resolver: "App\\Models\\SquadMember@getIsInSquad")
    points: [SquadPoint!] @hasMany
}

type SquadPoint {
    id: ID!
    points: Int
    position: Int
    category: String
    vintage: String
    version: Date
    corrected_manually: Boolean
}

type SquadCategory {
    id: ID
    category: String!
    name: String!
    players: [SquadMember!]!
}

type Squad {
    "ID"
    id: ID!
    "Number of players on the team"
    playerLimit: Int!
    "What league the squad plays in"
    league: LeagueType
    "Name"
    name: String
    "BadmintonPlayer match ID"
    externalTeamFightID: Int @rename(attribute: "external_team_fight_id")
    "Playing team"
    playingDatetime: DateTime @rename(attribute: "playing_datetime")
    "Playing place"
    playingPlace: String @rename(attribute: "playing_place")
    "Playing Address"
    playingAddress: String @rename(attribute: "playing_address")
    "Playing Zip code"
    playingZipCode: String @rename(attribute: "playing_zip_code")
    "Playing City"
    playingCity: String @rename(attribute: "playing_city")
    "Categories"
    categories: [SquadCategory!]!
    "Order"
    order: Int!
    "Ranking version"
    version: Date
}

type Teams {
    id: ID!,
    "Squads"
    squads: [Squad!]! @hasMany,
    "Name of the team"
    name: String,
    "Club"
    club: Club
    "Version"
    version: Date
    "Runde"
    round: Int
    "Game day"
    gameDate: Date @rename(attribute: "game_date"),
    "Updated at"
    updatedAt: DateTime @rename(attribute: "updated_at")
    "Created at"
    createdAt: DateTime @rename(attribute: "created_at")
}
