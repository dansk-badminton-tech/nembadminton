extend type Query {
    team(id: ID! @eq) : Teams @find
    teams(order: _ @orderBy(columns: ["created_at", "updated_at", "game_date"])) : [Teams!]! @paginate(defaultCount: 20, scopes: ["currentUser"]) @guard
    teamsByBadmintonId : [Teams!]! @guard @field(resolver: "App\\GraphQL\\Queries\\TeamsByBadmintonId")
    cancellations(teamId: String! @eq) : [Cancellation] @guard @all
    export(teamId: ID!) : String! @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Queries\\Exporter")
}

extend type Mutation {
    deleteSquadMember(id: ID! @eq) : SquadMember @delete @guard
    createSquadMember(input: CreatePlayerInput! @spread) : SquadMember @create @guard
    updateCategory(input: UpdateCategoryInputNew! @spread) : SquadCategory @update @guard
    deleteSquad(id: ID! @eq) : Squad @guard @delete
    createSquad(input: CreateSquadInput! @spread) : Squad! @create @guard
    updateSquad(input: UpdateSquadInput! @spread) : Squad! @update @guard
    updateTeam(input: UpdateTeamInput! @spread): Teams! @guard @update @inject(context: "user.id", name: "user_id")
    createTeam(input: CreateTeamInput! @spread) : Teams! @create @guard @inject(context: "user.id", name: "user_id")
    copyTeam(id: ID!) : Teams! @guard @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\CopyTeam@copyTeam")
    deleteTeam(id: ID! @eq) : Teams! @guard @delete @inject(context: "user.id", name: "user_id")
    notify(id: ID!) : Boolean @guard @inject(context: "user.id", name: "user_id") @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\UpdateTeams@notify")
    updatePoints(id: ID!, version: String!) : Boolean @guard @field(resolver: "FlyCompany\\TeamFight\\GraphQL\\Mutations\\UpdateTeams@updatePoints")
    updateCancellation(id: ID!, teamId: ID) : Cancellation @update @guard
    createCancellation(refId: String!, teamId: ID) : Cancellation @create @guard
    deleteCancellation(id: ID!) : Cancellation @delete @guard
}

input UpdateCategoryInputNew {
    id: ID
    category: String
    name: String
}

input CreatePlayerInput {
    category: CreateCategoryBelongsTo!
    gender: String!
    name: String!
    refId: String! @rename(attribute: "member_ref_id")
    points: CreatePointHasManyInput!
}

input CreateCategoryBelongsTo {
    connect: ID!
}

input CreatePointHasManyInput {
    create: [CreatePointInput!]!
}

input CreatePointInput {
    category: String
    points: Int
    position: Int
    vintage: Vintage
}

input UpdateSquadInput {
    id: ID!
    playerLimit: Int
    league: LeagueType
    order: Int
}

input CreateSquadInput {
    team: SquadBelongsTo!
    playerLimit: Int!
    league: LeagueType!
    categories: CreateCategoryHasManyInput!
    order: Int!
}

input SquadBelongsTo {
    connect: ID!
}

input CreateCategoryHasManyInput {
    create: [CreateCategoryInput!]!
}

input CreateCategoryInput {
    category: String!
    name: String!
}

type Cancellation {
    id: ID
    refId: String!
    teamId: String
}

input CreateTeamInput {
    club: CreateTeamBelongsTo
    name: String
    version: Date
    gameDate: Date @rename(attribute: "game_date")
}

input CreateTeamBelongsTo {
    connect: ID
}

input UpdateTeamInput {
    id: ID!
    name: String!
    version: Date!
    gameDate: Date! @rename(attribute: "game_date")
}

enum LeagueType{
    LIGA @enum(value: "LIGA")
    FIRSTDIVISION @enum(value: "FIRSTDIVISION")
    OTHER @enum(value: "OTHER")
}

type SquadMember {
    id: ID!
    refId: String! @rename(attribute: "member_ref_id")
    name: String!
    gender: String!
    isInSquad: Boolean! @field(resolver: "App\\Models\\SquadMember@getIsInSquad")
    points: [SquadPoint!] @hasMany
}

type SquadPoint {
    points: Int
    position: Int
    category: String
    vintage: String
}

type SquadCategory {
    id: ID
    category: String!
    name: String!
    players: [SquadMember!]!
}

type Squad {
    "ID"
    id: ID!
    "Number of players on the team"
    playerLimit: Int!
    "What league the squad plays in"
    league: LeagueType
    "Categories"
    categories: [SquadCategory!]!
    "Order"
    order: Int!
}

type Teams {
    id: ID!,
    "Squads"
    squads: [Squad!]! @hasMany,
    "Name of the team"
    name: String,
    "Club"
    club: Club
    "Version"
    version: Date
    "Game day"
    gameDate: Date @rename(attribute: "game_date"),
    "Updated at"
    updatedAt: DateTime @rename(attribute: "updated_at")
    "Created at"
    createdAt: DateTime @rename(attribute: "created_at")
}
