extend type Mutation {
    subscribeWebPush(input: SubscribeWebPushInput!) : PushSubscription @field(resolver: "App\\GraphQL\\Mutations\\Subscription@subscribe")
    unsubscribeWebPush(input: UnsubscribeWebPushInput!) : Boolean @field(resolver: "App\\GraphQL\\Mutations\\Subscription@unsubscribe")
    sendNotification : Boolean @field(resolver: "App\\GraphQL\\Mutations\\Subscription@sendNotification")
    notificationRead : Boolean @field(resolver: "FlyCompany\\Notification\\GraphQL\\Mutation\\Notification@read")
    notificationSend(input: NotificationSendInput!) : Boolean! @field(resolver: "FlyCompany\\Notification\\GraphQL\\Mutation\\Notification@send") @guard
}

extend type Query {
    notifications: [Notification!]! @all(scopes: ["myNotifications"]) @where(key: "read_at", value: null) @guard
    notificationReceivers: [User!]! @all @guard @can(ability: "admin")
}

extend type Subscription {
    notifications(userId: Int!): Notification @guard
}

input NotificationSendInput {
    receivers: NotificationReceiversInput!
    message: NotificationMessageInput!
}

input NotificationMessageInput {
    title: String!
    body: String!
    type: NotificationType!
}

enum NotificationType {
    Release @enum(value: "Release")
}

input NotificationReceiversInput {
    all: Boolean
    users: [ID!]
}

type Notification {
    id: ID!
    data: String!
    type: String!
    readAt: DateTime @rename(attribute: "read_at")
    createdAt: DateTime @rename(attribute: "created_at")
}

input UnsubscribeWebPushInput {
    endpoint: String!
}

type PushSubscription {
    id: ID!
}

input SubscribeWebPushInput {
    endpoint: String!
    publicKey: String
    authToken: String
    contentEncoding: String
}
