extend type Query{
    clubhouse(id: ID! @eq): Clubhouse @find
    invitation(token: ID! @eq): Invitation @find
}

extend type Mutation {
    # Create a clubhouse
    createClubhouse(input: CreateClubhouseInput! @spread) : Clubhouse @create

    # Send an invitation to a user
    invite(input: CreateInvitationInput! @spread) : Invitation @create @guard @event(dispatch: "App\\Events\\InvitationCreated")

    # Accept an invitation
    acceptInvitation(token: ID!): Invitation @guard @field(resolver: "\\App\\GraphQL\\Mutations\\Invitation@acceptInvitation")

    # Decline an invitation
    declineInvitation(token: ID!): Invitation @guard @field(resolver: "\\App\\GraphQL\\Mutations\\Invitation@declineInvitation")

    # Delete an invitation
    deleteInvitation(id: ID! @eq): Invitation @guard @delete @canFind(ability: "delete", find: "id")

    # Delete membership
    deleteMembership(clubhouseId: ID!, userId: ID!): Boolean @guard @hasPermission(name: "delete members") @field(resolver: "\\App\\GraphQL\\Mutations\\Membership@delete")
}

input CreateClubhouseInput {
    email: String!
    name: String!
    users: CreateUserBelongsToMany!
}

input CreateUserBelongsToMany {
    connect: [ID!]
}

input AcceptInvitation {
    token: ID!
    name: String!
}

input CreateInvitationInput {
    email: String! @rename(attribute: "invitee_email")
    inviter: CreateUserBelongsTo!
    clubhouse: CreateClubhouseBelongsTo!
    role: MemberRole
}

enum MemberRole {
    COACH @enum(value: "coach")
    PLAYER @enum(value: "player")
    CLUB_ADMIN @enum(value: "club-admin")
}

input CreateClubhouseBelongsTo {
    connect: ID
}

input CreateUserBelongsTo {
    connect: ID
}

type Invitation {
    id: ID!
    inviteeEmail: String @rename(attribute: "invitee_email")
    role: String!
    status: InvitationStatus!
    clubhouse: Clubhouse! @belongsTo
    inviter: User! @belongsTo
    invitee: User @belongsTo
    url: String!
    expiresAt: DateTime @rename(attribute: "expires_at")
    acceptedAt: DateTime @rename(attribute: "accepted_at")
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
}

enum InvitationStatus {
    PENDING @enum(value: "pending")
    ACCEPTED @enum(value: "accepted")
    DECLINED @enum(value: "declined")
}


type Clubhouse {
    id: ID!
    name: String!
    email: String!
    clubs: [Club!]! @belongsToMany
    users: [User!]! @hasMany
    invitations: [Invitation!]! @hasMany
    "Updated at"
    updatedAt: DateTime @rename(attribute: "updated_at")
    "Created at"
    createdAt: DateTime @rename(attribute: "created_at")
}


