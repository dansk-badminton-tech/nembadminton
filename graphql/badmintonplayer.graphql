extend type Query {
    "Clubs (scraping badmintonplayer.dk)"
    badmintonPlayerClubs: [OptionClub] @field(resolver: "FlyCompany\\Scraper\\GraphQL\\Queries\\ImportClubOptions")
    "Teams from a club (scraping badmintonplayer.dk)"
    badmintonPlayerTeams(input: BadmintonPlayerTeamsInput @spread): [BadmintonPlayerTeam] @field(resolver: "FlyCompany\\Scraper\\GraphQL\\Queries\\BadmintonPlayerTeams")
    "Team fights for a team (scraping badmintonplayer.dk)"
    badmintonPlayerTeamFights(input: BadmintonPlayerTeamFightsInput @spread): [BadmintonPlayerTeamFight] @field(resolver: "FlyCompany\\Scraper\\GraphQL\\Queries\\BadmintonPlayerTeamFights")
    "Team match information (scraping badmintonplayer.dk)"
    badmintonPlayerTeamMatch(input: BadmintonPlayerTeamMatchInput @spread) : ImportTeamMatch @field(resolver: "FlyCompany\\Scraper\\GraphQL\\Queries\\BadmintonPlayerTeamMatch")
    "Team matches information (scraping badmintonplayer.dk)"
    badmintonPlayerTeamMatches(input: BadmintonPlayerTeamMatchesInput!) : [ImportTeam!]! @field(resolver: "FlyCompany\\Scraper\\GraphQL\\Queries\\BadmintonPlayerTeamMatches")
    "Ranking versions (scraping badmintonplayer.dk)"
    rankingVersionsBP: [Date!]! @field(resolver: "FlyCompany\\Club\\GraphQL\\Queries\\RankingVersionsBP")
}

type BadmintonPlayerTeamFight {
    teams: [String!]!
    matchId: Int!
    gameTime: String!
    round: Int
    roundDate: String
}

input BadmintonPlayerTeamFightsInput {
    clubId: Int!
    season: Int!
    ageGroupId: Int!
    leagueGroupId: Int!
    clubName: String!
}

input BadmintonPlayerTeamsInput {
    clubId: Int!
    season: Int!
}

type BadmintonPlayerTeam {
    leagueGroupId: String!
    ageGroupId: String!
    name: String!
    league: String!
}

input BadmintonPlayerTeamMatchesInput {
    clubId: Int!
    leagueMatches: [BadmintonPlayerLeagueMatchInput!]!
    season: Int!
    version: Date!
}

input BadmintonPlayerTeamMatchInput {
    leagueMatchId: Int!
    season: Int!
    "Version is need for fetching points for players"
    version: Date
}

input BadmintonPlayerLeagueMatchInput {
    id: Int!
    teamNameHint: String!
    league: String!
    version: Date
}

enum Side {
    HOME @enum(value: "HOME")
    GUEST @enum(value: "GUEST")
}

type ImportTeamMatch {
    home: ImportTeam
    guest: ImportTeam
    "Playing place"
    playingPlace: String
    "Playing Address"
    playingAddress: String
    "Playing Zip code"
    playingZipCode: String
    "Playing City"
    playingCity: String
}

type ImportTeam{
    name: String!
    leagueMatchId: String!
    side: Side!
    squad: ImportSquad!
}

type ImportSquad{
    playerLimit: Int!
    league: LeagueType!
    categories: [ImportCategory]
}

type ImportMember{
    refId: String!
    name: String!
    gender: Gender!
    vintage: Vintage!
    points: [ImportPoint!]
}

type ImportPoint{
    points: Int
    position: Int
    category: String
    version: Date
    vintage: String
}

type ImportCategory{
    category: String!
    name: String!
    players: [ImportMember!]!
    results: [ImportResult!]!
}

type ImportResult {
    homePoints: Int
    guestPoints: Int
}

type OptionClub {
    id: ID!
    name: String!
}
